'use strict';

function makeId(length) {
    let result = '';
    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

function calculateCode(codes, length) {
    let code = makeId(length);
    if (codes.indexOf(code) !== -1) {
        calculateCode(codes, length);
    } else {
        return code;
    }
}

let bl = {
    "modelObj": null,
    "model": null,
    "soajs_service": null,
    "localConfig": null,

    "handleError": (soajs, errCode, err) => {
        if (err) {
            soajs.log.error(err);

            return ({
                "code": errCode,
                "msg": bl.localConfig.errors[errCode] + (errCode === 473 ? err.message : "")
            });
        }
        return ({
            "code": errCode,
            "msg": bl.localConfig.errors[errCode]
        });
    },

    "mp": {
        "getModel": (soajs) => {
            let l_modelObj = bl.modelObj;
            if (soajs && soajs.tenant && soajs.tenant.type === "client" && soajs.tenant.dbConfig) {
                l_modelObj = new bl.model(bl.soajs_service, soajs.tenant.dbConfig, null);
            }
            return l_modelObj;
        },
        "closeModel": (soajs, l_modelObj) => {
            if (soajs && soajs.tenant && soajs.tenant.type === "client" && soajs.tenant.dbConfig) {
                l_modelObj.closeConnection();
            }
        }
    },

    "checkCanEdit": (soajs, inputmaskData, cb) => {
        let uracDriver;
        let data;
        let modelObject = bl.modelObj;

        if (soajs.uracDriver && soajs.uracDriver.getProfile()) {
            uracDriver = soajs.uracDriver.getProfile();
        }

        if (inputmaskData.id) {
            if (uracDriver && uracDriver.tenant.id.toString() === inputmaskData.id.toString()) {
                return cb(null, {});
            }
            data.id = inputmaskData.id;
            data.locked = true;

        } else if (inputmaskData.code){
            if (uracDriver && uracDriver.tenant.code.toUpperCase() === inputmaskData.code.toUpperCase()) {
                return cb(null, {});
            }

            data.code = inputmaskData.code;
            data.locked = true;
        }
        modelObject.getTenant(data, (err, record) => {
            if (err) {
                return cb(bl.handleError(soajs, 473, err));
            }

            if (record) { // root tenant
                return cb(bl.handleError(soajs, 500, null));
            }
            return cb(null, {}); // Can update/delete not root tenant
        });
    },

    "list": (soajs, inputmaskData, cb) => {
        let l_modelObj = bl.mp.getModel(soajs);

        l_modelObj.listTenants(null, (err, records) => {
            bl.mp.closeModel(soajs, l_modelObj);

            if (err) {
                return cb(bl.handleError(soajs, 436, err));
            }
            return cb(null, records);
        });
    },

    // "add": function (soajs, inputmaskData, localConfig, cb) {
    //     //TODO: Generate code if not input by user by checking the existed codes of all tenants up to a 25 times count request.
    //     // if exist don't add
    //     // if not check on the insert if the generated code is also generated by another request so you got no dupliacate
    //     // the count request limit must not exceed 25 times.
    //
    //      let l_modelObj = bl.mp.getModel(soajs);
    //
    //     if (!inputmaskData) {
    //         return cb(bl.handleError(soajs, 473, null));
    //     }
    //
    //     let data;
    //
    //     data = {
    //         code: inputmaskData.code.toUpperCase(),
    //         type: inputmaskData.type,
    //         name: inputmaskData.name,
    //         description: inputmaskData.description,
    //         oauth: {
    //             "secret": 'this is a secret',
    //             "redirectURI": 'http://domain.com',
    //             "grants": ["password", "refresh_token"],
    //             "disabled": 0,
    //             "type": 2,
    //             "loginMode": "urac"
    //         },
    //         applications: []
    //     };
    //     if (inputmaskData.console) {
    //         data.oauth.disabled = 1;
    //         data.oauth.loginMode = "oauth";
    //     }
    //     if (inputmaskData.profile) {
    //         data.profile = inputmaskData.profile;
    //     }
    //     if (inputmaskData.tag){
    //         data.tag = inputmaskData.tag;
    //     }
    //
    //     if (inputmaskData.type === "product") {
    //         return cb(null, true);
    //     } else {
    //
    //     }
    //
    // },

    "update": (soajs, inputmaskData, cb) => {
        let l_modelObj = bl.mp.getModel(soajs);

        if (!inputmaskData) {
            return cb(bl.handleError(soajs, 473, null));
        }

        let data = {
            description: inputmaskData.description,
            name: inputmaskData.name,
            type: inputmaskData.type
        };

        if (inputmaskData.profile) {
            data.profile = inputmaskData.profile;
        }
        if (inputmaskData.tag) {
            data.tag = inputmaskData.tag;
        }

        bl.checkCanEdit(soajs, data, (err, result) => {
            l_modelObj.updateTenant(data, (err, record) => {
                if (err) {
                    return cb(bl.handleError(soajs, 421, err));
                }
                return cb(null, record);
            });
        });
    },


};

module.exports = bl;